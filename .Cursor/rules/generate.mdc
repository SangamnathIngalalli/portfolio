# Cursor AI File Generation Guidelines

## Overview
This document provides guidelines for how Cursor AI should generate new files in this portfolio project.

## General Principles
- **Consistency**: Follow existing file structure and naming conventions
- **Documentation**: Always include appropriate comments and documentation
- **Accessibility**: Ensure all generated content meets accessibility standards
- **Performance**: Optimize for fast loading and smooth user experience
- **SEO**: Include proper meta tags and structured data where applicable

## File Naming Conventions
- Use kebab-case for file names (e.g., `my-component.js`, `style-sheet.css`)
- Use descriptive names that clearly indicate the file's purpose
- Follow existing patterns in the project structure

## HTML Files
- Include proper DOCTYPE and meta tags
- Use semantic HTML elements
- Ensure responsive design with viewport meta tag
- Include proper ARIA labels and roles
- Add structured data (JSON-LD) for SEO when appropriate

## CSS Files
- Use CSS custom properties (variables) for consistent theming
- Follow BEM methodology for class naming
- Include responsive breakpoints
- Optimize for performance (minimize specificity conflicts)
- Use modern CSS features with appropriate fallbacks

## JavaScript Files
- Use ES6+ features with appropriate polyfills
- Include JSDoc comments for functions and classes
- Handle errors gracefully
- Optimize for performance (debounce, throttle, lazy loading)
- Follow existing code style and patterns

## Documentation Files
- Use clear, concise language
- Include examples where helpful
- Follow markdown best practices
- Update related documentation when making changes

## Asset Files
- Optimize images for web (appropriate formats, compression)
- Use descriptive file names
- Include alt text for images
- Consider lazy loading for large assets

## Testing Considerations
- Ensure generated code is testable
- Include appropriate error handling
- Consider edge cases and accessibility
- Test across different browsers and devices

## Integration Points
- Check for existing dependencies and patterns
- Ensure compatibility with current build process
- Update any configuration files as needed
- Consider impact on existing functionality

## Quality Checklist
Before generating any file, ensure:
- [ ] Follows project structure and conventions
- [ ] Includes appropriate documentation
- [ ] Meets accessibility standards
- [ ] Optimized for performance
- [ ] Compatible with existing codebase
- [ ] Includes proper error handling
- [ ] Follows security best practices
description:
globs:
alwaysApply: true
---
