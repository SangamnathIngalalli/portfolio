# Cursor AI Workflow Rules

## Overview
This document defines task orchestration logic and step-by-step execution rules for Cursor AI agents working on this portfolio project.

## Task Execution Workflow

### 1. Initial Assessment
- **Analyze Request**: Understand the user's request and requirements
- **Check Context**: Review `Docs/Ai_use_context.md` for project context
- **Identify Scope**: Determine what files, features, or changes are needed
- **Validate Feasibility**: Ensure the request aligns with project goals and constraints

### 2. Planning Phase
- **Research Existing Code**: Examine current implementation and patterns
- **Check Documentation**: Review relevant docs in `Docs/` directory
- **Identify Dependencies**: Determine what other files or systems might be affected
- **Create Implementation Plan**: Use `Docs/Implementation_template.md` if creating new features

### 3. Execution Phase
- **Follow File Generation Guidelines**: Apply rules from `generate.mdc`
- **Maintain Consistency**: Ensure new code follows existing patterns
- **Incremental Changes**: Make small, testable changes rather than large modifications
- **Document Changes**: Update relevant documentation as you work

### 4. Quality Assurance
- **Code Review**: Check generated code against quality standards
- **Testing**: Ensure functionality works as expected
- **Accessibility Check**: Verify accessibility standards are met
- **Performance Review**: Optimize for speed and efficiency

### 5. Integration
- **Update Related Files**: Modify any files that depend on your changes
- **Check Compatibility**: Ensure changes work with existing functionality
- **Update Documentation**: Modify relevant docs to reflect changes
- **Update Context**: Add new context to `Docs/Ai_use_context.md` if needed

## Decision-Making Framework

### When to Create New Files
- New features require new components or modules
- Existing files are becoming too large or complex
- New functionality doesn't fit existing patterns
- Documentation needs to be organized differently

### When to Modify Existing Files
- Bug fixes or improvements to existing functionality
- Adding features that fit within current structure
- Updating content or styling
- Performance optimizations

### When to Refactor
- Code duplication is identified
- Performance issues are detected
- Accessibility improvements are needed
- Code organization can be improved

## Error Handling
- **Graceful Degradation**: Ensure functionality works even if some features fail
- **User Feedback**: Provide clear error messages and guidance
- **Fallback Options**: Include alternative approaches when possible
- **Logging**: Add appropriate logging for debugging

## Communication Protocol
- **Clear Explanations**: Explain what you're doing and why
- **Progress Updates**: Keep user informed of progress
- **Ask for Clarification**: When requirements are unclear
- **Suggest Improvements**: Offer enhancements when appropriate

## Performance Considerations
- **Lazy Loading**: Implement for large assets or components
- **Minification**: Optimize file sizes where possible
- **Caching**: Consider caching strategies for better performance
- **Bundle Optimization**: Minimize unnecessary dependencies

## Security Guidelines
- **Input Validation**: Always validate user inputs
- **XSS Prevention**: Sanitize data to prevent cross-site scripting
- **HTTPS**: Ensure secure connections for external resources
- **Content Security Policy**: Implement appropriate CSP headers

## Accessibility Standards
- **WCAG Compliance**: Follow WCAG 2.1 AA guidelines
- **Keyboard Navigation**: Ensure all functionality is keyboard accessible
- **Screen Reader Support**: Include proper ARIA labels and roles
- **Color Contrast**: Maintain sufficient color contrast ratios

## Testing Strategy
- **Unit Testing**: Test individual components and functions
- **Integration Testing**: Verify components work together
- **Cross-browser Testing**: Ensure compatibility across browsers
- **Mobile Testing**: Test responsive design on various devices

## Documentation Requirements
- **Code Comments**: Include clear, helpful comments
- **README Updates**: Update project README when necessary
- **API Documentation**: Document any new APIs or interfaces
- **Change Log**: Record significant changes and their impact
description:
globs:
alwaysApply: true
---
